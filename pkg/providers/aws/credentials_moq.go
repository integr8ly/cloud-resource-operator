// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package aws

import (
	"context"
	"sync"
)

// Ensure, that CredentialManagerMock does implement CredentialManager.
// If this is not the case, regenerate this file with moq.
var _ CredentialManager = &CredentialManagerMock{}

// CredentialManagerMock is a mock implementation of CredentialManager.
//
// 	func TestSomethingThatUsesCredentialManager(t *testing.T) {
//
// 		// make and configure a mocked CredentialManager
// 		mockedCredentialManager := &CredentialManagerMock{
// 			ReconcileBucketOwnerCredentialsFunc: func(ctx context.Context, name string, ns string, bucket string) (*Credentials, error) {
// 				panic("mock out the ReconcileBucketOwnerCredentials method")
// 			},
// 			ReconcileProviderCredentialsFunc: func(ctx context.Context, ns string) (*Credentials, error) {
// 				panic("mock out the ReconcileProviderCredentials method")
// 			},
// 		}
//
// 		// use mockedCredentialManager in code that requires CredentialManager
// 		// and then make assertions.
//
// 	}
type CredentialManagerMock struct {
	// ReconcileBucketOwnerCredentialsFunc mocks the ReconcileBucketOwnerCredentials method.
	ReconcileBucketOwnerCredentialsFunc func(ctx context.Context, name string, ns string, bucket string) (*Credentials, error)

	// ReconcileProviderCredentialsFunc mocks the ReconcileProviderCredentials method.
	ReconcileProviderCredentialsFunc func(ctx context.Context, ns string) (*Credentials, error)

	// calls tracks calls to the methods.
	calls struct {
		// ReconcileBucketOwnerCredentials holds details about calls to the ReconcileBucketOwnerCredentials method.
		ReconcileBucketOwnerCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Ns is the ns argument value.
			Ns string
			// Bucket is the bucket argument value.
			Bucket string
		}
		// ReconcileProviderCredentials holds details about calls to the ReconcileProviderCredentials method.
		ReconcileProviderCredentials []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Ns is the ns argument value.
			Ns string
		}
	}
	lockReconcileBucketOwnerCredentials sync.RWMutex
	lockReconcileProviderCredentials    sync.RWMutex
}

// ReconcileBucketOwnerCredentials calls ReconcileBucketOwnerCredentialsFunc.
func (mock *CredentialManagerMock) ReconcileBucketOwnerCredentials(ctx context.Context, name string, ns string, bucket string) (*Credentials, error) {
	if mock.ReconcileBucketOwnerCredentialsFunc == nil {
		panic("CredentialManagerMock.ReconcileBucketOwnerCredentialsFunc: method is nil but CredentialManager.ReconcileBucketOwnerCredentials was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Name   string
		Ns     string
		Bucket string
	}{
		Ctx:    ctx,
		Name:   name,
		Ns:     ns,
		Bucket: bucket,
	}
	mock.lockReconcileBucketOwnerCredentials.Lock()
	mock.calls.ReconcileBucketOwnerCredentials = append(mock.calls.ReconcileBucketOwnerCredentials, callInfo)
	mock.lockReconcileBucketOwnerCredentials.Unlock()
	return mock.ReconcileBucketOwnerCredentialsFunc(ctx, name, ns, bucket)
}

// ReconcileBucketOwnerCredentialsCalls gets all the calls that were made to ReconcileBucketOwnerCredentials.
// Check the length with:
//     len(mockedCredentialManager.ReconcileBucketOwnerCredentialsCalls())
func (mock *CredentialManagerMock) ReconcileBucketOwnerCredentialsCalls() []struct {
	Ctx    context.Context
	Name   string
	Ns     string
	Bucket string
} {
	var calls []struct {
		Ctx    context.Context
		Name   string
		Ns     string
		Bucket string
	}
	mock.lockReconcileBucketOwnerCredentials.RLock()
	calls = mock.calls.ReconcileBucketOwnerCredentials
	mock.lockReconcileBucketOwnerCredentials.RUnlock()
	return calls
}

// ReconcileProviderCredentials calls ReconcileProviderCredentialsFunc.
func (mock *CredentialManagerMock) ReconcileProviderCredentials(ctx context.Context, ns string) (*Credentials, error) {
	if mock.ReconcileProviderCredentialsFunc == nil {
		panic("CredentialManagerMock.ReconcileProviderCredentialsFunc: method is nil but CredentialManager.ReconcileProviderCredentials was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Ns  string
	}{
		Ctx: ctx,
		Ns:  ns,
	}
	mock.lockReconcileProviderCredentials.Lock()
	mock.calls.ReconcileProviderCredentials = append(mock.calls.ReconcileProviderCredentials, callInfo)
	mock.lockReconcileProviderCredentials.Unlock()
	return mock.ReconcileProviderCredentialsFunc(ctx, ns)
}

// ReconcileProviderCredentialsCalls gets all the calls that were made to ReconcileProviderCredentials.
// Check the length with:
//     len(mockedCredentialManager.ReconcileProviderCredentialsCalls())
func (mock *CredentialManagerMock) ReconcileProviderCredentialsCalls() []struct {
	Ctx context.Context
	Ns  string
} {
	var calls []struct {
		Ctx context.Context
		Ns  string
	}
	mock.lockReconcileProviderCredentials.RLock()
	calls = mock.calls.ReconcileProviderCredentials
	mock.lockReconcileProviderCredentials.RUnlock()
	return calls
}
